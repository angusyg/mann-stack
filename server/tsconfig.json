{
  "compilerOptions": {
    /* Basic Options */
    "target": "es6" /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017','ES2018' or 'ESNEXT'. */,
    "module": "commonjs" /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. */,
    // "lib": ["dom", "es5", "scriptHost"],      /* Specify library files to be included in the compilation. */
    // "allowJs": true,                          /* Allow javascript files to be compiled. */
    // "checkJs": true,                          /* Report errors in .js files. */
    // "jsx": "preserve",                        /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */
    // "jsxFactory": "React.createElement",      /* Specify the JSX factory function to use when targeting react JSX emit, e.g. React.createElement or h. */
    "declaration": true /* Generates corresponding '.d.ts' file. */,
    // "declarationMap": true,                   /* Generates a sourcemap for each corresponding '.d.ts' file. */
    // "declarationDir": "./typings",            /* Output directory for generated declaration files. */
    "sourceMap": true /* Generates corresponding '.map' file. */,
    // "outFile": "./",                          /* Concatenate and emit output to single file. */
    "outDir": "./dist" /* Redirect output structure to the directory. */,
    // "rootDir": "./",                          /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */
    // "composite": true,                        /* Enable project compilation */
    "removeComments": true /* Do not emit comments to output. */,
    // "noEmit": true,                           /* Do not emit outputs. */
    // "noEmitHelpers": true,                    /* Do not generate custom helper functions like __extends in compiled output. */
    // "noEmitOnError": true,                    /* Do not emit outputs if any errors were reported. */
    // "importHelpers": true,                    /* Import emit helpers from 'tslib'. */
    // "downlevelIteration": true,               /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */
    // "isolatedModules": true,                  /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */
    // "charset": "utf8",                        /* The character set of the input files. */
    // "newLine": "lf",                          /* Use the specified end of line sequence to be used when emitting files: "crlf" (windows) or "lf" (unix). */
    // "preserveConstEnums": true,               /* Do not erase const enum declarations in generated code. */

    /* Strict Type-Checking Options */
    "strict": true /* Enable all strict type-checking options. */,
    "noImplicitAny": false /* Raise error on expressions and declarations with an implied 'any' type. */,
    // "strictNullChecks": true,                 /* Enable strict null checks. */
    "strictFunctionTypes": true /* Enable strict checking of function types. */,
    // "strictPropertyInitialization": true,     /* Enable strict checking of property initialization in classes. */
    "noImplicitThis": true /* Raise error on 'this' expressions with an implied 'any' type. */,
    "alwaysStrict": true /* Parse in strict mode and emit "use strict" for each source file. */,
    // "noStrictGenericChecks": true,            /* Disable strict checking of generic signatures in function types. */

    /* Additional Checks */
    "noUnusedLocals": true /* Report errors on unused locals. */,
    "noUnusedParameters": true /* Report errors on unused parameters. */,
    // "noImplicitReturns": true,                /* Report error when not all code paths in function return a value. */
    // "noImplicitUseStrict": true,              /* Do not emit "use strict" directives in module output. */
    // "noFallthroughCasesInSwitch": true,       /* Report errors for fallthrough cases in switch statement. */
    // "allowUnreachableCode": true,             /* Do not report errors on unreachable code. */
    // "allowUnusedLabels": true,                /* Do not report errors on unused labels. */
    // "forceConsistentCasingInFileNames": true, /* Disallow inconsistently-cased references to the same file. */
    // "keyofStringsOnly": true,                 /* Resolve keyof to string valued property names only (no numbers or symbols). */
    // "skipLibCheck": true,                     /* Skip type checking of all declaration files (*.d.ts). */

    /* Module Resolution Options */
    // "moduleResolution": "node",               /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */
    "baseUrl": "./" /* Base directory to resolve non-absolute module names. */,
    // "paths": {},                              /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */
    // "rootDirs": [],                           /* List of root folders whose combined content represents the structure of the project at runtime. */
    // "typeRoots": [],                          /* List of folders to include type definitions from. */
    // "types": [],                              /* Type declaration files to be included in compilation. */
    "allowSyntheticDefaultImports": true /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */,
    // "esModuleInterop": true,                  /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */
    // "preserveSymlinks": true,                 /* Do not resolve the real path of symlinks. */

    /* Source Map Options */
    // "sourceRoot": "",                         /* Specify the location where debugger should locate TypeScript files instead of source locations. */
    // "mapRoot": "",                            /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSourceMap": true,                  /* Emit a single file with source maps instead of having a separate file. */
    // "inlineSources": true,                    /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */

    /* Experimental Options */
    "experimentalDecorators": true /* Enables experimental support for ES7 decorators. */,
    "emitDecoratorMetadata": true /* Enables experimental support for emitting type metadata for decorators. */,
    // "stripInternal": true,                    /* Do not emit declarations for code that has an /** @internal */ JSDoc annotation. */

    /* Build options */
    // "build": true,                            /* Builds this project and all of its dependencies specified by Project References. Note that this flag is not compatible with others in this file. */
    // "diagnostics": true,                      /* Show diagnostic information. */
    // "disableSizeLimit": true,                 /* Disable size limitation on JavaScript project. */
    // "emitBOM": true,                          /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
    // "emitDeclarationOnly": true,              /* Only emit '.d.ts' declaration files. */
    // "extendedDiagnostics": true,              /* Show verbose diagnostic information. */
    // "listEmittedFiles": true,                 /* Print names of generated files part of the compilation. */
    // "listFiles": true,                        /* Print names of files part of the compilation. */
    // "locale": "",                             /* The locale to use to show error messages, e.g. en-us. */
    // "maxNodeModuleJsDepth": 1,                /* The maximum dependency depth to search under node_modules and load JavaScript files. Only applicable with --allowJs. */
    // "noErrorTruncation": true,                /* Do not truncate error messages. */
    "noLib": false /* Do not include the default library file (lib.d.ts). */
    // "noResolve": true,                        /* Do not add triple-slash references or module import targets to the list of compiled files. */
    // "preserveWatchOutput": true,              /* Keep outdated console output in watch mode instead of clearing the screen. */
    // "pretty": false,                          /* Stylize errors and messages using color and context. */
    // "project": "",                            /* Compile a project given a valid configuration file. The argument can be a file path to a valid JSON configuration file, or a directory path to a directory containing a tsconfig.json file.*/
    // "resolveJsonModule": true,                /* Include modules imported with .json extension. */
    // "suppressExcessPropertyErrors": true,     /* Suppress excess property checks for object literals. */
    // "suppressImplicitAnyIndexErrors": true,   /* Suppress --noImplicitAny errors for indexing objects lacking index signatures. */
    // "traceResolution": true,                  /* Report module resolution log messages. */
  },
  "include": ["src/**/*.ts"],
  "exclude": ["node_modules", "**/*.spec.ts"]
}
